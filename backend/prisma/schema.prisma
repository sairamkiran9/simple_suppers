generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

model Person {
  firebaseUid   String   @unique  // Firebase UID as primary key
  email         String   @unique @id
  firstname     String?  // Optional initially (from Firebase displayName parsing)
  lastname      String?  // Optional initially (from Firebase displayName parsing)
  displayName   String?  // From Firebase (Google OAuth)
  photoURL      String?  // From Firebase (Google OAuth)
  phone         String?  // Required for delivery - filled during profile completion
  emailVerified Boolean  @default(false)
  
  // Profile completion tracking
  profileCompleted Boolean @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  address       Address?
  producer      Producer?
  consumer      Consumer?
}

model Address {
  id           Int     @id @default(autoincrement())
  street       String
  city         String
  state        String
  zipCode      String
  personEmail  String  @unique
  person       Person  @relation(fields: [personEmail], references: [email])
}

model Producer {
  id           Int     @id @default(autoincrement())
  licenseNumber String  @unique
  personEmail   String  @unique
  person        Person  @relation(fields: [personEmail], references: [email])
  menuItems     MenuItem[]
}


model Consumer {
  id           Int      @id @default(autoincrement())
  personEmail  String   @unique
  person       Person   @relation(fields: [personEmail], references: [email])
  orders       FoodOrder[]
}

model MenuItem {
  id            Int        @id @default(autoincrement())
  name          String
  price         Float
  description   String?
  maxLimit      Int        @default(100)
  createdAt     DateTime   @default(now())

  producerId    Int
  producer      Producer   @relation(fields: [producerId], references: [id])
  orderItems    OrderItem[]
}

model FoodOrder {
  id           Int           @id @default(autoincrement())
  totalPrice   Float
  status       OrderStatus
  createdAt    DateTime      @default(now())

  consumerId   Int
  consumer     Consumer      @relation(fields: [consumerId], references: [id])
  items        OrderItem[]
}

model OrderItem {
  id         Int        @id @default(autoincrement())
  quantity   Int

  orderId    Int
  itemId     Int
  order      FoodOrder  @relation(fields: [orderId], references: [id])
  menuItem   MenuItem   @relation(fields: [itemId], references: [id])
}
